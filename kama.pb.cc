// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kama.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kama.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kama {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* AngleChannelState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AngleChannelState_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateGettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateGettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateGettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateGettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableSettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableSettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableSettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableSettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableSettingNak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableSettingNak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableGettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableGettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableGettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableGettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableSettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableSettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableSettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableSettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableSettingNak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableSettingNak_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableGettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableGettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableGettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableGettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointingTableItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointingTableItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationTableItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationTableItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kama_2eproto() {
  protobuf_AddDesc_kama_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kama.proto");
  GOOGLE_CHECK(file != NULL);
  Envelope_descriptor_ = file->message_type(0);
  static const int Envelope_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, angle_channel_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, state_getting_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, state_getting_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, pointing_table_setting_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, pointing_table_setting_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, pointing_table_setting_nak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, pointing_table_getting_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, pointing_table_getting_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, calibration_table_setting_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, calibration_table_setting_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, calibration_table_setting_nak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, calibration_table_getting_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, calibration_table_getting_ack_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  AngleChannelState_descriptor_ = file->message_type(1);
  static const int AngleChannelState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, time_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, tracking_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, elevation_),
  };
  AngleChannelState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AngleChannelState_descriptor_,
      AngleChannelState::default_instance_,
      AngleChannelState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleChannelState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AngleChannelState));
  StateGettingReq_descriptor_ = file->message_type(2);
  static const int StateGettingReq_offsets_[1] = {
  };
  StateGettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateGettingReq_descriptor_,
      StateGettingReq::default_instance_,
      StateGettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateGettingReq));
  StateGettingAck_descriptor_ = file->message_type(3);
  static const int StateGettingAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingAck, registration_device_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingAck, pointing_device_connected_),
  };
  StateGettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateGettingAck_descriptor_,
      StateGettingAck::default_instance_,
      StateGettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateGettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateGettingAck));
  Ping_descriptor_ = file->message_type(4);
  static const int Ping_offsets_[1] = {
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  Pong_descriptor_ = file->message_type(5);
  static const int Pong_offsets_[1] = {
  };
  Pong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pong_descriptor_,
      Pong::default_instance_,
      Pong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pong));
  PointingTableSettingReq_descriptor_ = file->message_type(6);
  static const int PointingTableSettingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingReq, table_),
  };
  PointingTableSettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableSettingReq_descriptor_,
      PointingTableSettingReq::default_instance_,
      PointingTableSettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableSettingReq));
  PointingTableSettingAck_descriptor_ = file->message_type(7);
  static const int PointingTableSettingAck_offsets_[1] = {
  };
  PointingTableSettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableSettingAck_descriptor_,
      PointingTableSettingAck::default_instance_,
      PointingTableSettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableSettingAck));
  PointingTableSettingNak_descriptor_ = file->message_type(8);
  static const int PointingTableSettingNak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingNak, error_message_),
  };
  PointingTableSettingNak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableSettingNak_descriptor_,
      PointingTableSettingNak::default_instance_,
      PointingTableSettingNak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingNak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableSettingNak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableSettingNak));
  PointingTableGettingReq_descriptor_ = file->message_type(9);
  static const int PointingTableGettingReq_offsets_[1] = {
  };
  PointingTableGettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableGettingReq_descriptor_,
      PointingTableGettingReq::default_instance_,
      PointingTableGettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableGettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableGettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableGettingReq));
  PointingTableGettingAck_descriptor_ = file->message_type(10);
  static const int PointingTableGettingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableGettingAck, table_),
  };
  PointingTableGettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableGettingAck_descriptor_,
      PointingTableGettingAck::default_instance_,
      PointingTableGettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableGettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableGettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableGettingAck));
  CalibrationTableSettingReq_descriptor_ = file->message_type(11);
  static const int CalibrationTableSettingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingReq, table_),
  };
  CalibrationTableSettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableSettingReq_descriptor_,
      CalibrationTableSettingReq::default_instance_,
      CalibrationTableSettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableSettingReq));
  CalibrationTableSettingAck_descriptor_ = file->message_type(12);
  static const int CalibrationTableSettingAck_offsets_[1] = {
  };
  CalibrationTableSettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableSettingAck_descriptor_,
      CalibrationTableSettingAck::default_instance_,
      CalibrationTableSettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableSettingAck));
  CalibrationTableSettingNak_descriptor_ = file->message_type(13);
  static const int CalibrationTableSettingNak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingNak, error_message_),
  };
  CalibrationTableSettingNak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableSettingNak_descriptor_,
      CalibrationTableSettingNak::default_instance_,
      CalibrationTableSettingNak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingNak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableSettingNak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableSettingNak));
  CalibrationTableGettingReq_descriptor_ = file->message_type(14);
  static const int CalibrationTableGettingReq_offsets_[1] = {
  };
  CalibrationTableGettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableGettingReq_descriptor_,
      CalibrationTableGettingReq::default_instance_,
      CalibrationTableGettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableGettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableGettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableGettingReq));
  CalibrationTableGettingAck_descriptor_ = file->message_type(15);
  static const int CalibrationTableGettingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableGettingAck, table_),
  };
  CalibrationTableGettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableGettingAck_descriptor_,
      CalibrationTableGettingAck::default_instance_,
      CalibrationTableGettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableGettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableGettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableGettingAck));
  PointingTable_descriptor_ = file->message_type(16);
  static const int PointingTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTable, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTable, object_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTable, item_),
  };
  PointingTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTable_descriptor_,
      PointingTable::default_instance_,
      PointingTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTable));
  PointingTableItem_descriptor_ = file->message_type(17);
  static const int PointingTableItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableItem, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableItem, elevation_),
  };
  PointingTableItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointingTableItem_descriptor_,
      PointingTableItem::default_instance_,
      PointingTableItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointingTableItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointingTableItem));
  CalibrationTable_descriptor_ = file->message_type(18);
  static const int CalibrationTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTable, item_),
  };
  CalibrationTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTable_descriptor_,
      CalibrationTable::default_instance_,
      CalibrationTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTable));
  CalibrationTableItem_descriptor_ = file->message_type(19);
  static const int CalibrationTableItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableItem, value_),
  };
  CalibrationTableItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationTableItem_descriptor_,
      CalibrationTableItem::default_instance_,
      CalibrationTableItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationTableItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationTableItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kama_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AngleChannelState_descriptor_, &AngleChannelState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateGettingReq_descriptor_, &StateGettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateGettingAck_descriptor_, &StateGettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pong_descriptor_, &Pong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableSettingReq_descriptor_, &PointingTableSettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableSettingAck_descriptor_, &PointingTableSettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableSettingNak_descriptor_, &PointingTableSettingNak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableGettingReq_descriptor_, &PointingTableGettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableGettingAck_descriptor_, &PointingTableGettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableSettingReq_descriptor_, &CalibrationTableSettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableSettingAck_descriptor_, &CalibrationTableSettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableSettingNak_descriptor_, &CalibrationTableSettingNak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableGettingReq_descriptor_, &CalibrationTableGettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableGettingAck_descriptor_, &CalibrationTableGettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTable_descriptor_, &PointingTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointingTableItem_descriptor_, &PointingTableItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTable_descriptor_, &CalibrationTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationTableItem_descriptor_, &CalibrationTableItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kama_2eproto() {
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete AngleChannelState::default_instance_;
  delete AngleChannelState_reflection_;
  delete StateGettingReq::default_instance_;
  delete StateGettingReq_reflection_;
  delete StateGettingAck::default_instance_;
  delete StateGettingAck_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Pong::default_instance_;
  delete Pong_reflection_;
  delete PointingTableSettingReq::default_instance_;
  delete PointingTableSettingReq_reflection_;
  delete PointingTableSettingAck::default_instance_;
  delete PointingTableSettingAck_reflection_;
  delete PointingTableSettingNak::default_instance_;
  delete PointingTableSettingNak_reflection_;
  delete PointingTableGettingReq::default_instance_;
  delete PointingTableGettingReq_reflection_;
  delete PointingTableGettingAck::default_instance_;
  delete PointingTableGettingAck_reflection_;
  delete CalibrationTableSettingReq::default_instance_;
  delete CalibrationTableSettingReq_reflection_;
  delete CalibrationTableSettingAck::default_instance_;
  delete CalibrationTableSettingAck_reflection_;
  delete CalibrationTableSettingNak::default_instance_;
  delete CalibrationTableSettingNak_reflection_;
  delete CalibrationTableGettingReq::default_instance_;
  delete CalibrationTableGettingReq_reflection_;
  delete CalibrationTableGettingAck::default_instance_;
  delete CalibrationTableGettingAck_reflection_;
  delete PointingTable::default_instance_;
  delete PointingTable_reflection_;
  delete PointingTableItem::default_instance_;
  delete PointingTableItem_reflection_;
  delete CalibrationTable::default_instance_;
  delete CalibrationTable_reflection_;
  delete CalibrationTableItem::default_instance_;
  delete CalibrationTableItem_reflection_;
}

void protobuf_AddDesc_kama_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkama.proto\022\rkama.protocol\"\325\007\n\010Envelope"
    "\022=\n\023angle_channel_state\030\001 \001(\0132 .kama.pro"
    "tocol.AngleChannelState\0229\n\021state_getting"
    "_req\030\002 \001(\0132\036.kama.protocol.StateGettingR"
    "eq\0229\n\021state_getting_ack\030\003 \001(\0132\036.kama.pro"
    "tocol.StateGettingAck\022J\n\032pointing_table_"
    "setting_req\030\004 \001(\0132&.kama.protocol.Pointi"
    "ngTableSettingReq\022J\n\032pointing_table_sett"
    "ing_ack\030\005 \001(\0132&.kama.protocol.PointingTa"
    "bleSettingAck\022J\n\032pointing_table_setting_"
    "nak\030\006 \001(\0132&.kama.protocol.PointingTableS"
    "ettingNak\022J\n\032pointing_table_getting_req\030"
    "\007 \001(\0132&.kama.protocol.PointingTableGetti"
    "ngReq\022J\n\032pointing_table_getting_ack\030\010 \001("
    "\0132&.kama.protocol.PointingTableGettingAc"
    "k\022P\n\035calibration_table_setting_req\030\t \001(\013"
    "2).kama.protocol.CalibrationTableSetting"
    "Req\022P\n\035calibration_table_setting_ack\030\n \001"
    "(\0132).kama.protocol.CalibrationTableSetti"
    "ngAck\022P\n\035calibration_table_setting_nak\030\013"
    " \001(\0132).kama.protocol.CalibrationTableSet"
    "tingNak\022P\n\035calibration_table_getting_req"
    "\030\014 \001(\0132).kama.protocol.CalibrationTableG"
    "ettingReq\022P\n\035calibration_table_getting_a"
    "ck\030\r \001(\0132).kama.protocol.CalibrationTabl"
    "eGettingAck\"o\n\021AngleChannelState\022\021\n\ttime"
    "_mode\030\001 \002(\005\022\014\n\004time\030\002 \002(\t\022\025\n\rtracking_mo"
    "de\030\003 \002(\005\022\017\n\007azimuth\030\004 \002(\001\022\021\n\televation\030\005"
    " \002(\001\"\021\n\017StateGettingReq\"[\n\017StateGettingA"
    "ck\022%\n\035registration_device_connected\030\001 \002("
    "\010\022!\n\031pointing_device_connected\030\002 \002(\010\"\006\n\004"
    "Ping\"\006\n\004Pong\"F\n\027PointingTableSettingReq\022"
    "+\n\005table\030\001 \002(\0132\034.kama.protocol.PointingT"
    "able\"\031\n\027PointingTableSettingAck\"0\n\027Point"
    "ingTableSettingNak\022\025\n\rerror_message\030\001 \002("
    "\t\"\031\n\027PointingTableGettingReq\"F\n\027Pointing"
    "TableGettingAck\022+\n\005table\030\001 \002(\0132\034.kama.pr"
    "otocol.PointingTable\"L\n\032CalibrationTable"
    "SettingReq\022.\n\005table\030\001 \002(\0132\037.kama.protoco"
    "l.CalibrationTable\"\034\n\032CalibrationTableSe"
    "ttingAck\"3\n\032CalibrationTableSettingNak\022\025"
    "\n\rerror_message\030\001 \002(\t\"\034\n\032CalibrationTabl"
    "eGettingReq\"L\n\032CalibrationTableGettingAc"
    "k\022.\n\005table\030\001 \002(\0132\037.kama.protocol.Calibra"
    "tionTable\"b\n\rPointingTable\022\014\n\004time\030\001 \001(\t"
    "\022\023\n\013object_type\030\002 \001(\t\022.\n\004item\030\003 \003(\0132 .ka"
    "ma.protocol.PointingTableItem\"E\n\021Pointin"
    "gTableItem\022\014\n\004time\030\001 \002(\001\022\017\n\007azimuth\030\002 \002("
    "\001\022\021\n\televation\030\003 \002(\001\"E\n\020CalibrationTable"
    "\0221\n\004item\030\003 \003(\0132#.kama.protocol.Calibrati"
    "onTableItem\"3\n\024CalibrationTableItem\022\014\n\004t"
    "ime\030\001 \002(\001\022\r\n\005value\030\002 \002(\001", 2064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kama.proto", &protobuf_RegisterTypes);
  Envelope::default_instance_ = new Envelope();
  AngleChannelState::default_instance_ = new AngleChannelState();
  StateGettingReq::default_instance_ = new StateGettingReq();
  StateGettingAck::default_instance_ = new StateGettingAck();
  Ping::default_instance_ = new Ping();
  Pong::default_instance_ = new Pong();
  PointingTableSettingReq::default_instance_ = new PointingTableSettingReq();
  PointingTableSettingAck::default_instance_ = new PointingTableSettingAck();
  PointingTableSettingNak::default_instance_ = new PointingTableSettingNak();
  PointingTableGettingReq::default_instance_ = new PointingTableGettingReq();
  PointingTableGettingAck::default_instance_ = new PointingTableGettingAck();
  CalibrationTableSettingReq::default_instance_ = new CalibrationTableSettingReq();
  CalibrationTableSettingAck::default_instance_ = new CalibrationTableSettingAck();
  CalibrationTableSettingNak::default_instance_ = new CalibrationTableSettingNak();
  CalibrationTableGettingReq::default_instance_ = new CalibrationTableGettingReq();
  CalibrationTableGettingAck::default_instance_ = new CalibrationTableGettingAck();
  PointingTable::default_instance_ = new PointingTable();
  PointingTableItem::default_instance_ = new PointingTableItem();
  CalibrationTable::default_instance_ = new CalibrationTable();
  CalibrationTableItem::default_instance_ = new CalibrationTableItem();
  Envelope::default_instance_->InitAsDefaultInstance();
  AngleChannelState::default_instance_->InitAsDefaultInstance();
  StateGettingReq::default_instance_->InitAsDefaultInstance();
  StateGettingAck::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Pong::default_instance_->InitAsDefaultInstance();
  PointingTableSettingReq::default_instance_->InitAsDefaultInstance();
  PointingTableSettingAck::default_instance_->InitAsDefaultInstance();
  PointingTableSettingNak::default_instance_->InitAsDefaultInstance();
  PointingTableGettingReq::default_instance_->InitAsDefaultInstance();
  PointingTableGettingAck::default_instance_->InitAsDefaultInstance();
  CalibrationTableSettingReq::default_instance_->InitAsDefaultInstance();
  CalibrationTableSettingAck::default_instance_->InitAsDefaultInstance();
  CalibrationTableSettingNak::default_instance_->InitAsDefaultInstance();
  CalibrationTableGettingReq::default_instance_->InitAsDefaultInstance();
  CalibrationTableGettingAck::default_instance_->InitAsDefaultInstance();
  PointingTable::default_instance_->InitAsDefaultInstance();
  PointingTableItem::default_instance_->InitAsDefaultInstance();
  CalibrationTable::default_instance_->InitAsDefaultInstance();
  CalibrationTableItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kama_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kama_2eproto {
  StaticDescriptorInitializer_kama_2eproto() {
    protobuf_AddDesc_kama_2eproto();
  }
} static_descriptor_initializer_kama_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Envelope::kAngleChannelStateFieldNumber;
const int Envelope::kStateGettingReqFieldNumber;
const int Envelope::kStateGettingAckFieldNumber;
const int Envelope::kPointingTableSettingReqFieldNumber;
const int Envelope::kPointingTableSettingAckFieldNumber;
const int Envelope::kPointingTableSettingNakFieldNumber;
const int Envelope::kPointingTableGettingReqFieldNumber;
const int Envelope::kPointingTableGettingAckFieldNumber;
const int Envelope::kCalibrationTableSettingReqFieldNumber;
const int Envelope::kCalibrationTableSettingAckFieldNumber;
const int Envelope::kCalibrationTableSettingNakFieldNumber;
const int Envelope::kCalibrationTableGettingReqFieldNumber;
const int Envelope::kCalibrationTableGettingAckFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
  angle_channel_state_ = const_cast< ::kama::protocol::AngleChannelState*>(&::kama::protocol::AngleChannelState::default_instance());
  state_getting_req_ = const_cast< ::kama::protocol::StateGettingReq*>(&::kama::protocol::StateGettingReq::default_instance());
  state_getting_ack_ = const_cast< ::kama::protocol::StateGettingAck*>(&::kama::protocol::StateGettingAck::default_instance());
  pointing_table_setting_req_ = const_cast< ::kama::protocol::PointingTableSettingReq*>(&::kama::protocol::PointingTableSettingReq::default_instance());
  pointing_table_setting_ack_ = const_cast< ::kama::protocol::PointingTableSettingAck*>(&::kama::protocol::PointingTableSettingAck::default_instance());
  pointing_table_setting_nak_ = const_cast< ::kama::protocol::PointingTableSettingNak*>(&::kama::protocol::PointingTableSettingNak::default_instance());
  pointing_table_getting_req_ = const_cast< ::kama::protocol::PointingTableGettingReq*>(&::kama::protocol::PointingTableGettingReq::default_instance());
  pointing_table_getting_ack_ = const_cast< ::kama::protocol::PointingTableGettingAck*>(&::kama::protocol::PointingTableGettingAck::default_instance());
  calibration_table_setting_req_ = const_cast< ::kama::protocol::CalibrationTableSettingReq*>(&::kama::protocol::CalibrationTableSettingReq::default_instance());
  calibration_table_setting_ack_ = const_cast< ::kama::protocol::CalibrationTableSettingAck*>(&::kama::protocol::CalibrationTableSettingAck::default_instance());
  calibration_table_setting_nak_ = const_cast< ::kama::protocol::CalibrationTableSettingNak*>(&::kama::protocol::CalibrationTableSettingNak::default_instance());
  calibration_table_getting_req_ = const_cast< ::kama::protocol::CalibrationTableGettingReq*>(&::kama::protocol::CalibrationTableGettingReq::default_instance());
  calibration_table_getting_ack_ = const_cast< ::kama::protocol::CalibrationTableGettingAck*>(&::kama::protocol::CalibrationTableGettingAck::default_instance());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  angle_channel_state_ = NULL;
  state_getting_req_ = NULL;
  state_getting_ack_ = NULL;
  pointing_table_setting_req_ = NULL;
  pointing_table_setting_ack_ = NULL;
  pointing_table_setting_nak_ = NULL;
  pointing_table_getting_req_ = NULL;
  pointing_table_getting_ack_ = NULL;
  calibration_table_setting_req_ = NULL;
  calibration_table_setting_ack_ = NULL;
  calibration_table_setting_nak_ = NULL;
  calibration_table_getting_req_ = NULL;
  calibration_table_getting_ack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete angle_channel_state_;
    delete state_getting_req_;
    delete state_getting_ack_;
    delete pointing_table_setting_req_;
    delete pointing_table_setting_ack_;
    delete pointing_table_setting_nak_;
    delete pointing_table_getting_req_;
    delete pointing_table_getting_ack_;
    delete calibration_table_setting_req_;
    delete calibration_table_setting_ack_;
    delete calibration_table_setting_nak_;
    delete calibration_table_getting_req_;
    delete calibration_table_getting_ack_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_angle_channel_state()) {
      if (angle_channel_state_ != NULL) angle_channel_state_->::kama::protocol::AngleChannelState::Clear();
    }
    if (has_state_getting_req()) {
      if (state_getting_req_ != NULL) state_getting_req_->::kama::protocol::StateGettingReq::Clear();
    }
    if (has_state_getting_ack()) {
      if (state_getting_ack_ != NULL) state_getting_ack_->::kama::protocol::StateGettingAck::Clear();
    }
    if (has_pointing_table_setting_req()) {
      if (pointing_table_setting_req_ != NULL) pointing_table_setting_req_->::kama::protocol::PointingTableSettingReq::Clear();
    }
    if (has_pointing_table_setting_ack()) {
      if (pointing_table_setting_ack_ != NULL) pointing_table_setting_ack_->::kama::protocol::PointingTableSettingAck::Clear();
    }
    if (has_pointing_table_setting_nak()) {
      if (pointing_table_setting_nak_ != NULL) pointing_table_setting_nak_->::kama::protocol::PointingTableSettingNak::Clear();
    }
    if (has_pointing_table_getting_req()) {
      if (pointing_table_getting_req_ != NULL) pointing_table_getting_req_->::kama::protocol::PointingTableGettingReq::Clear();
    }
    if (has_pointing_table_getting_ack()) {
      if (pointing_table_getting_ack_ != NULL) pointing_table_getting_ack_->::kama::protocol::PointingTableGettingAck::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_calibration_table_setting_req()) {
      if (calibration_table_setting_req_ != NULL) calibration_table_setting_req_->::kama::protocol::CalibrationTableSettingReq::Clear();
    }
    if (has_calibration_table_setting_ack()) {
      if (calibration_table_setting_ack_ != NULL) calibration_table_setting_ack_->::kama::protocol::CalibrationTableSettingAck::Clear();
    }
    if (has_calibration_table_setting_nak()) {
      if (calibration_table_setting_nak_ != NULL) calibration_table_setting_nak_->::kama::protocol::CalibrationTableSettingNak::Clear();
    }
    if (has_calibration_table_getting_req()) {
      if (calibration_table_getting_req_ != NULL) calibration_table_getting_req_->::kama::protocol::CalibrationTableGettingReq::Clear();
    }
    if (has_calibration_table_getting_ack()) {
      if (calibration_table_getting_ack_ != NULL) calibration_table_getting_ack_->::kama::protocol::CalibrationTableGettingAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kama.protocol.AngleChannelState angle_channel_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle_channel_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state_getting_req;
        break;
      }

      // optional .kama.protocol.StateGettingReq state_getting_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_getting_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_getting_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_state_getting_ack;
        break;
      }

      // optional .kama.protocol.StateGettingAck state_getting_ack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_getting_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_getting_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pointing_table_setting_req;
        break;
      }

      // optional .kama.protocol.PointingTableSettingReq pointing_table_setting_req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointing_table_setting_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointing_table_setting_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pointing_table_setting_ack;
        break;
      }

      // optional .kama.protocol.PointingTableSettingAck pointing_table_setting_ack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointing_table_setting_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointing_table_setting_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pointing_table_setting_nak;
        break;
      }

      // optional .kama.protocol.PointingTableSettingNak pointing_table_setting_nak = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointing_table_setting_nak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointing_table_setting_nak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pointing_table_getting_req;
        break;
      }

      // optional .kama.protocol.PointingTableGettingReq pointing_table_getting_req = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointing_table_getting_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointing_table_getting_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pointing_table_getting_ack;
        break;
      }

      // optional .kama.protocol.PointingTableGettingAck pointing_table_getting_ack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointing_table_getting_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointing_table_getting_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_calibration_table_setting_req;
        break;
      }

      // optional .kama.protocol.CalibrationTableSettingReq calibration_table_setting_req = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibration_table_setting_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table_setting_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_calibration_table_setting_ack;
        break;
      }

      // optional .kama.protocol.CalibrationTableSettingAck calibration_table_setting_ack = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibration_table_setting_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table_setting_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_calibration_table_setting_nak;
        break;
      }

      // optional .kama.protocol.CalibrationTableSettingNak calibration_table_setting_nak = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibration_table_setting_nak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table_setting_nak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_calibration_table_getting_req;
        break;
      }

      // optional .kama.protocol.CalibrationTableGettingReq calibration_table_getting_req = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibration_table_getting_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table_getting_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_calibration_table_getting_ack;
        break;
      }

      // optional .kama.protocol.CalibrationTableGettingAck calibration_table_getting_ack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibration_table_getting_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibration_table_getting_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .kama.protocol.AngleChannelState angle_channel_state = 1;
  if (has_angle_channel_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->angle_channel_state(), output);
  }

  // optional .kama.protocol.StateGettingReq state_getting_req = 2;
  if (has_state_getting_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state_getting_req(), output);
  }

  // optional .kama.protocol.StateGettingAck state_getting_ack = 3;
  if (has_state_getting_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state_getting_ack(), output);
  }

  // optional .kama.protocol.PointingTableSettingReq pointing_table_setting_req = 4;
  if (has_pointing_table_setting_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pointing_table_setting_req(), output);
  }

  // optional .kama.protocol.PointingTableSettingAck pointing_table_setting_ack = 5;
  if (has_pointing_table_setting_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pointing_table_setting_ack(), output);
  }

  // optional .kama.protocol.PointingTableSettingNak pointing_table_setting_nak = 6;
  if (has_pointing_table_setting_nak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pointing_table_setting_nak(), output);
  }

  // optional .kama.protocol.PointingTableGettingReq pointing_table_getting_req = 7;
  if (has_pointing_table_getting_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pointing_table_getting_req(), output);
  }

  // optional .kama.protocol.PointingTableGettingAck pointing_table_getting_ack = 8;
  if (has_pointing_table_getting_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pointing_table_getting_ack(), output);
  }

  // optional .kama.protocol.CalibrationTableSettingReq calibration_table_setting_req = 9;
  if (has_calibration_table_setting_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->calibration_table_setting_req(), output);
  }

  // optional .kama.protocol.CalibrationTableSettingAck calibration_table_setting_ack = 10;
  if (has_calibration_table_setting_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->calibration_table_setting_ack(), output);
  }

  // optional .kama.protocol.CalibrationTableSettingNak calibration_table_setting_nak = 11;
  if (has_calibration_table_setting_nak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->calibration_table_setting_nak(), output);
  }

  // optional .kama.protocol.CalibrationTableGettingReq calibration_table_getting_req = 12;
  if (has_calibration_table_getting_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->calibration_table_getting_req(), output);
  }

  // optional .kama.protocol.CalibrationTableGettingAck calibration_table_getting_ack = 13;
  if (has_calibration_table_getting_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->calibration_table_getting_ack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .kama.protocol.AngleChannelState angle_channel_state = 1;
  if (has_angle_channel_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->angle_channel_state(), target);
  }

  // optional .kama.protocol.StateGettingReq state_getting_req = 2;
  if (has_state_getting_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state_getting_req(), target);
  }

  // optional .kama.protocol.StateGettingAck state_getting_ack = 3;
  if (has_state_getting_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state_getting_ack(), target);
  }

  // optional .kama.protocol.PointingTableSettingReq pointing_table_setting_req = 4;
  if (has_pointing_table_setting_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pointing_table_setting_req(), target);
  }

  // optional .kama.protocol.PointingTableSettingAck pointing_table_setting_ack = 5;
  if (has_pointing_table_setting_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pointing_table_setting_ack(), target);
  }

  // optional .kama.protocol.PointingTableSettingNak pointing_table_setting_nak = 6;
  if (has_pointing_table_setting_nak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pointing_table_setting_nak(), target);
  }

  // optional .kama.protocol.PointingTableGettingReq pointing_table_getting_req = 7;
  if (has_pointing_table_getting_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pointing_table_getting_req(), target);
  }

  // optional .kama.protocol.PointingTableGettingAck pointing_table_getting_ack = 8;
  if (has_pointing_table_getting_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pointing_table_getting_ack(), target);
  }

  // optional .kama.protocol.CalibrationTableSettingReq calibration_table_setting_req = 9;
  if (has_calibration_table_setting_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->calibration_table_setting_req(), target);
  }

  // optional .kama.protocol.CalibrationTableSettingAck calibration_table_setting_ack = 10;
  if (has_calibration_table_setting_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->calibration_table_setting_ack(), target);
  }

  // optional .kama.protocol.CalibrationTableSettingNak calibration_table_setting_nak = 11;
  if (has_calibration_table_setting_nak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->calibration_table_setting_nak(), target);
  }

  // optional .kama.protocol.CalibrationTableGettingReq calibration_table_getting_req = 12;
  if (has_calibration_table_getting_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->calibration_table_getting_req(), target);
  }

  // optional .kama.protocol.CalibrationTableGettingAck calibration_table_getting_ack = 13;
  if (has_calibration_table_getting_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->calibration_table_getting_ack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .kama.protocol.AngleChannelState angle_channel_state = 1;
    if (has_angle_channel_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle_channel_state());
    }

    // optional .kama.protocol.StateGettingReq state_getting_req = 2;
    if (has_state_getting_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_getting_req());
    }

    // optional .kama.protocol.StateGettingAck state_getting_ack = 3;
    if (has_state_getting_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_getting_ack());
    }

    // optional .kama.protocol.PointingTableSettingReq pointing_table_setting_req = 4;
    if (has_pointing_table_setting_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointing_table_setting_req());
    }

    // optional .kama.protocol.PointingTableSettingAck pointing_table_setting_ack = 5;
    if (has_pointing_table_setting_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointing_table_setting_ack());
    }

    // optional .kama.protocol.PointingTableSettingNak pointing_table_setting_nak = 6;
    if (has_pointing_table_setting_nak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointing_table_setting_nak());
    }

    // optional .kama.protocol.PointingTableGettingReq pointing_table_getting_req = 7;
    if (has_pointing_table_getting_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointing_table_getting_req());
    }

    // optional .kama.protocol.PointingTableGettingAck pointing_table_getting_ack = 8;
    if (has_pointing_table_getting_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointing_table_getting_ack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .kama.protocol.CalibrationTableSettingReq calibration_table_setting_req = 9;
    if (has_calibration_table_setting_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_table_setting_req());
    }

    // optional .kama.protocol.CalibrationTableSettingAck calibration_table_setting_ack = 10;
    if (has_calibration_table_setting_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_table_setting_ack());
    }

    // optional .kama.protocol.CalibrationTableSettingNak calibration_table_setting_nak = 11;
    if (has_calibration_table_setting_nak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_table_setting_nak());
    }

    // optional .kama.protocol.CalibrationTableGettingReq calibration_table_getting_req = 12;
    if (has_calibration_table_getting_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_table_getting_req());
    }

    // optional .kama.protocol.CalibrationTableGettingAck calibration_table_getting_ack = 13;
    if (has_calibration_table_getting_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibration_table_getting_ack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_channel_state()) {
      mutable_angle_channel_state()->::kama::protocol::AngleChannelState::MergeFrom(from.angle_channel_state());
    }
    if (from.has_state_getting_req()) {
      mutable_state_getting_req()->::kama::protocol::StateGettingReq::MergeFrom(from.state_getting_req());
    }
    if (from.has_state_getting_ack()) {
      mutable_state_getting_ack()->::kama::protocol::StateGettingAck::MergeFrom(from.state_getting_ack());
    }
    if (from.has_pointing_table_setting_req()) {
      mutable_pointing_table_setting_req()->::kama::protocol::PointingTableSettingReq::MergeFrom(from.pointing_table_setting_req());
    }
    if (from.has_pointing_table_setting_ack()) {
      mutable_pointing_table_setting_ack()->::kama::protocol::PointingTableSettingAck::MergeFrom(from.pointing_table_setting_ack());
    }
    if (from.has_pointing_table_setting_nak()) {
      mutable_pointing_table_setting_nak()->::kama::protocol::PointingTableSettingNak::MergeFrom(from.pointing_table_setting_nak());
    }
    if (from.has_pointing_table_getting_req()) {
      mutable_pointing_table_getting_req()->::kama::protocol::PointingTableGettingReq::MergeFrom(from.pointing_table_getting_req());
    }
    if (from.has_pointing_table_getting_ack()) {
      mutable_pointing_table_getting_ack()->::kama::protocol::PointingTableGettingAck::MergeFrom(from.pointing_table_getting_ack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calibration_table_setting_req()) {
      mutable_calibration_table_setting_req()->::kama::protocol::CalibrationTableSettingReq::MergeFrom(from.calibration_table_setting_req());
    }
    if (from.has_calibration_table_setting_ack()) {
      mutable_calibration_table_setting_ack()->::kama::protocol::CalibrationTableSettingAck::MergeFrom(from.calibration_table_setting_ack());
    }
    if (from.has_calibration_table_setting_nak()) {
      mutable_calibration_table_setting_nak()->::kama::protocol::CalibrationTableSettingNak::MergeFrom(from.calibration_table_setting_nak());
    }
    if (from.has_calibration_table_getting_req()) {
      mutable_calibration_table_getting_req()->::kama::protocol::CalibrationTableGettingReq::MergeFrom(from.calibration_table_getting_req());
    }
    if (from.has_calibration_table_getting_ack()) {
      mutable_calibration_table_getting_ack()->::kama::protocol::CalibrationTableGettingAck::MergeFrom(from.calibration_table_getting_ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {

  if (has_angle_channel_state()) {
    if (!this->angle_channel_state().IsInitialized()) return false;
  }
  if (has_state_getting_ack()) {
    if (!this->state_getting_ack().IsInitialized()) return false;
  }
  if (has_pointing_table_setting_req()) {
    if (!this->pointing_table_setting_req().IsInitialized()) return false;
  }
  if (has_pointing_table_setting_nak()) {
    if (!this->pointing_table_setting_nak().IsInitialized()) return false;
  }
  if (has_pointing_table_getting_ack()) {
    if (!this->pointing_table_getting_ack().IsInitialized()) return false;
  }
  if (has_calibration_table_setting_req()) {
    if (!this->calibration_table_setting_req().IsInitialized()) return false;
  }
  if (has_calibration_table_setting_nak()) {
    if (!this->calibration_table_setting_nak().IsInitialized()) return false;
  }
  if (has_calibration_table_getting_ack()) {
    if (!this->calibration_table_getting_ack().IsInitialized()) return false;
  }
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(angle_channel_state_, other->angle_channel_state_);
    std::swap(state_getting_req_, other->state_getting_req_);
    std::swap(state_getting_ack_, other->state_getting_ack_);
    std::swap(pointing_table_setting_req_, other->pointing_table_setting_req_);
    std::swap(pointing_table_setting_ack_, other->pointing_table_setting_ack_);
    std::swap(pointing_table_setting_nak_, other->pointing_table_setting_nak_);
    std::swap(pointing_table_getting_req_, other->pointing_table_getting_req_);
    std::swap(pointing_table_getting_ack_, other->pointing_table_getting_ack_);
    std::swap(calibration_table_setting_req_, other->calibration_table_setting_req_);
    std::swap(calibration_table_setting_ack_, other->calibration_table_setting_ack_);
    std::swap(calibration_table_setting_nak_, other->calibration_table_setting_nak_);
    std::swap(calibration_table_getting_req_, other->calibration_table_getting_req_);
    std::swap(calibration_table_getting_ack_, other->calibration_table_getting_ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AngleChannelState::kTimeModeFieldNumber;
const int AngleChannelState::kTimeFieldNumber;
const int AngleChannelState::kTrackingModeFieldNumber;
const int AngleChannelState::kAzimuthFieldNumber;
const int AngleChannelState::kElevationFieldNumber;
#endif  // !_MSC_VER

AngleChannelState::AngleChannelState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AngleChannelState::InitAsDefaultInstance() {
}

AngleChannelState::AngleChannelState(const AngleChannelState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AngleChannelState::SharedCtor() {
  _cached_size_ = 0;
  time_mode_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracking_mode_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AngleChannelState::~AngleChannelState() {
  SharedDtor();
}

void AngleChannelState::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void AngleChannelState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AngleChannelState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AngleChannelState_descriptor_;
}

const AngleChannelState& AngleChannelState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

AngleChannelState* AngleChannelState::default_instance_ = NULL;

AngleChannelState* AngleChannelState::New() const {
  return new AngleChannelState;
}

void AngleChannelState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_mode_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    tracking_mode_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AngleChannelState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_mode_)));
          set_has_time_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tracking_mode;
        break;
      }

      // required int32 tracking_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracking_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracking_mode_)));
          set_has_tracking_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_azimuth;
        break;
      }

      // required double azimuth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_elevation;
        break;
      }

      // required double elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AngleChannelState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time_mode = 1;
  if (has_time_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_mode(), output);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // required int32 tracking_mode = 3;
  if (has_tracking_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tracking_mode(), output);
  }

  // required double azimuth = 4;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->azimuth(), output);
  }

  // required double elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->elevation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AngleChannelState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time_mode = 1;
  if (has_time_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_mode(), target);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // required int32 tracking_mode = 3;
  if (has_tracking_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tracking_mode(), target);
  }

  // required double azimuth = 4;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->azimuth(), target);
  }

  // required double elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->elevation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AngleChannelState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time_mode = 1;
    if (has_time_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_mode());
    }

    // required string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 tracking_mode = 3;
    if (has_tracking_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracking_mode());
    }

    // required double azimuth = 4;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // required double elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AngleChannelState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AngleChannelState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AngleChannelState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AngleChannelState::MergeFrom(const AngleChannelState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_mode()) {
      set_time_mode(from.time_mode());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tracking_mode()) {
      set_tracking_mode(from.tracking_mode());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AngleChannelState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngleChannelState::CopyFrom(const AngleChannelState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleChannelState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AngleChannelState::Swap(AngleChannelState* other) {
  if (other != this) {
    std::swap(time_mode_, other->time_mode_);
    std::swap(time_, other->time_);
    std::swap(tracking_mode_, other->tracking_mode_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AngleChannelState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AngleChannelState_descriptor_;
  metadata.reflection = AngleChannelState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StateGettingReq::StateGettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateGettingReq::InitAsDefaultInstance() {
}

StateGettingReq::StateGettingReq(const StateGettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateGettingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateGettingReq::~StateGettingReq() {
  SharedDtor();
}

void StateGettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateGettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateGettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateGettingReq_descriptor_;
}

const StateGettingReq& StateGettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

StateGettingReq* StateGettingReq::default_instance_ = NULL;

StateGettingReq* StateGettingReq::New() const {
  return new StateGettingReq;
}

void StateGettingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateGettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StateGettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateGettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateGettingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateGettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateGettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateGettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateGettingReq::MergeFrom(const StateGettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateGettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateGettingReq::CopyFrom(const StateGettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateGettingReq::IsInitialized() const {

  return true;
}

void StateGettingReq::Swap(StateGettingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateGettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateGettingReq_descriptor_;
  metadata.reflection = StateGettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateGettingAck::kRegistrationDeviceConnectedFieldNumber;
const int StateGettingAck::kPointingDeviceConnectedFieldNumber;
#endif  // !_MSC_VER

StateGettingAck::StateGettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateGettingAck::InitAsDefaultInstance() {
}

StateGettingAck::StateGettingAck(const StateGettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateGettingAck::SharedCtor() {
  _cached_size_ = 0;
  registration_device_connected_ = false;
  pointing_device_connected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateGettingAck::~StateGettingAck() {
  SharedDtor();
}

void StateGettingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateGettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateGettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateGettingAck_descriptor_;
}

const StateGettingAck& StateGettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

StateGettingAck* StateGettingAck::default_instance_ = NULL;

StateGettingAck* StateGettingAck::New() const {
  return new StateGettingAck;
}

void StateGettingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    registration_device_connected_ = false;
    pointing_device_connected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateGettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool registration_device_connected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registration_device_connected_)));
          set_has_registration_device_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointing_device_connected;
        break;
      }

      // required bool pointing_device_connected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointing_device_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pointing_device_connected_)));
          set_has_pointing_device_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateGettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool registration_device_connected = 1;
  if (has_registration_device_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->registration_device_connected(), output);
  }

  // required bool pointing_device_connected = 2;
  if (has_pointing_device_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pointing_device_connected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateGettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool registration_device_connected = 1;
  if (has_registration_device_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->registration_device_connected(), target);
  }

  // required bool pointing_device_connected = 2;
  if (has_pointing_device_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pointing_device_connected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateGettingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool registration_device_connected = 1;
    if (has_registration_device_connected()) {
      total_size += 1 + 1;
    }

    // required bool pointing_device_connected = 2;
    if (has_pointing_device_connected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateGettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateGettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateGettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateGettingAck::MergeFrom(const StateGettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registration_device_connected()) {
      set_registration_device_connected(from.registration_device_connected());
    }
    if (from.has_pointing_device_connected()) {
      set_pointing_device_connected(from.pointing_device_connected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateGettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateGettingAck::CopyFrom(const StateGettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateGettingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StateGettingAck::Swap(StateGettingAck* other) {
  if (other != this) {
    std::swap(registration_device_connected_, other->registration_device_connected_);
    std::swap(pointing_device_connected_, other->pointing_device_connected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateGettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateGettingAck_descriptor_;
  metadata.reflection = StateGettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Pong::Pong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pong::InitAsDefaultInstance() {
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pong::~Pong() {
  SharedDtor();
}

void Pong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pong_descriptor_;
}

const Pong& Pong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

Pong* Pong::default_instance_ = NULL;

Pong* Pong::New() const {
  return new Pong;
}

void Pong::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pong::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {

  return true;
}

void Pong::Swap(Pong* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pong_descriptor_;
  metadata.reflection = Pong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointingTableSettingReq::kTableFieldNumber;
#endif  // !_MSC_VER

PointingTableSettingReq::PointingTableSettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableSettingReq::InitAsDefaultInstance() {
  table_ = const_cast< ::kama::protocol::PointingTable*>(&::kama::protocol::PointingTable::default_instance());
}

PointingTableSettingReq::PointingTableSettingReq(const PointingTableSettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableSettingReq::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableSettingReq::~PointingTableSettingReq() {
  SharedDtor();
}

void PointingTableSettingReq::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void PointingTableSettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableSettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableSettingReq_descriptor_;
}

const PointingTableSettingReq& PointingTableSettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableSettingReq* PointingTableSettingReq::default_instance_ = NULL;

PointingTableSettingReq* PointingTableSettingReq::New() const {
  return new PointingTableSettingReq;
}

void PointingTableSettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::kama::protocol::PointingTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableSettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kama.protocol.PointingTable table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointingTableSettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kama.protocol.PointingTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableSettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kama.protocol.PointingTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableSettingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kama.protocol.PointingTable table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableSettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableSettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableSettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableSettingReq::MergeFrom(const PointingTableSettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::kama::protocol::PointingTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableSettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableSettingReq::CopyFrom(const PointingTableSettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableSettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table()) {
    if (!this->table().IsInitialized()) return false;
  }
  return true;
}

void PointingTableSettingReq::Swap(PointingTableSettingReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableSettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableSettingReq_descriptor_;
  metadata.reflection = PointingTableSettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PointingTableSettingAck::PointingTableSettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableSettingAck::InitAsDefaultInstance() {
}

PointingTableSettingAck::PointingTableSettingAck(const PointingTableSettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableSettingAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableSettingAck::~PointingTableSettingAck() {
  SharedDtor();
}

void PointingTableSettingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointingTableSettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableSettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableSettingAck_descriptor_;
}

const PointingTableSettingAck& PointingTableSettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableSettingAck* PointingTableSettingAck::default_instance_ = NULL;

PointingTableSettingAck* PointingTableSettingAck::New() const {
  return new PointingTableSettingAck;
}

void PointingTableSettingAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableSettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PointingTableSettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableSettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableSettingAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableSettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableSettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableSettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableSettingAck::MergeFrom(const PointingTableSettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableSettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableSettingAck::CopyFrom(const PointingTableSettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableSettingAck::IsInitialized() const {

  return true;
}

void PointingTableSettingAck::Swap(PointingTableSettingAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableSettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableSettingAck_descriptor_;
  metadata.reflection = PointingTableSettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointingTableSettingNak::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

PointingTableSettingNak::PointingTableSettingNak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableSettingNak::InitAsDefaultInstance() {
}

PointingTableSettingNak::PointingTableSettingNak(const PointingTableSettingNak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableSettingNak::SharedCtor() {
  _cached_size_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableSettingNak::~PointingTableSettingNak() {
  SharedDtor();
}

void PointingTableSettingNak::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void PointingTableSettingNak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableSettingNak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableSettingNak_descriptor_;
}

const PointingTableSettingNak& PointingTableSettingNak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableSettingNak* PointingTableSettingNak::default_instance_ = NULL;

PointingTableSettingNak* PointingTableSettingNak::New() const {
  return new PointingTableSettingNak;
}

void PointingTableSettingNak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableSettingNak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error_message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointingTableSettingNak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableSettingNak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableSettingNak::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string error_message = 1;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableSettingNak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableSettingNak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableSettingNak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableSettingNak::MergeFrom(const PointingTableSettingNak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableSettingNak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableSettingNak::CopyFrom(const PointingTableSettingNak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableSettingNak::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PointingTableSettingNak::Swap(PointingTableSettingNak* other) {
  if (other != this) {
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableSettingNak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableSettingNak_descriptor_;
  metadata.reflection = PointingTableSettingNak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PointingTableGettingReq::PointingTableGettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableGettingReq::InitAsDefaultInstance() {
}

PointingTableGettingReq::PointingTableGettingReq(const PointingTableGettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableGettingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableGettingReq::~PointingTableGettingReq() {
  SharedDtor();
}

void PointingTableGettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointingTableGettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableGettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableGettingReq_descriptor_;
}

const PointingTableGettingReq& PointingTableGettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableGettingReq* PointingTableGettingReq::default_instance_ = NULL;

PointingTableGettingReq* PointingTableGettingReq::New() const {
  return new PointingTableGettingReq;
}

void PointingTableGettingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableGettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PointingTableGettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableGettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableGettingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableGettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableGettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableGettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableGettingReq::MergeFrom(const PointingTableGettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableGettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableGettingReq::CopyFrom(const PointingTableGettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableGettingReq::IsInitialized() const {

  return true;
}

void PointingTableGettingReq::Swap(PointingTableGettingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableGettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableGettingReq_descriptor_;
  metadata.reflection = PointingTableGettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointingTableGettingAck::kTableFieldNumber;
#endif  // !_MSC_VER

PointingTableGettingAck::PointingTableGettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableGettingAck::InitAsDefaultInstance() {
  table_ = const_cast< ::kama::protocol::PointingTable*>(&::kama::protocol::PointingTable::default_instance());
}

PointingTableGettingAck::PointingTableGettingAck(const PointingTableGettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableGettingAck::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableGettingAck::~PointingTableGettingAck() {
  SharedDtor();
}

void PointingTableGettingAck::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void PointingTableGettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableGettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableGettingAck_descriptor_;
}

const PointingTableGettingAck& PointingTableGettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableGettingAck* PointingTableGettingAck::default_instance_ = NULL;

PointingTableGettingAck* PointingTableGettingAck::New() const {
  return new PointingTableGettingAck;
}

void PointingTableGettingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::kama::protocol::PointingTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableGettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kama.protocol.PointingTable table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointingTableGettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kama.protocol.PointingTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableGettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kama.protocol.PointingTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableGettingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kama.protocol.PointingTable table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableGettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableGettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableGettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableGettingAck::MergeFrom(const PointingTableGettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::kama::protocol::PointingTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableGettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableGettingAck::CopyFrom(const PointingTableGettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableGettingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table()) {
    if (!this->table().IsInitialized()) return false;
  }
  return true;
}

void PointingTableGettingAck::Swap(PointingTableGettingAck* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableGettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableGettingAck_descriptor_;
  metadata.reflection = PointingTableGettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationTableSettingReq::kTableFieldNumber;
#endif  // !_MSC_VER

CalibrationTableSettingReq::CalibrationTableSettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableSettingReq::InitAsDefaultInstance() {
  table_ = const_cast< ::kama::protocol::CalibrationTable*>(&::kama::protocol::CalibrationTable::default_instance());
}

CalibrationTableSettingReq::CalibrationTableSettingReq(const CalibrationTableSettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableSettingReq::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableSettingReq::~CalibrationTableSettingReq() {
  SharedDtor();
}

void CalibrationTableSettingReq::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void CalibrationTableSettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableSettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableSettingReq_descriptor_;
}

const CalibrationTableSettingReq& CalibrationTableSettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableSettingReq* CalibrationTableSettingReq::default_instance_ = NULL;

CalibrationTableSettingReq* CalibrationTableSettingReq::New() const {
  return new CalibrationTableSettingReq;
}

void CalibrationTableSettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::kama::protocol::CalibrationTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableSettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kama.protocol.CalibrationTable table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTableSettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kama.protocol.CalibrationTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableSettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kama.protocol.CalibrationTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableSettingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kama.protocol.CalibrationTable table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableSettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableSettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableSettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableSettingReq::MergeFrom(const CalibrationTableSettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::kama::protocol::CalibrationTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableSettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableSettingReq::CopyFrom(const CalibrationTableSettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableSettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table()) {
    if (!this->table().IsInitialized()) return false;
  }
  return true;
}

void CalibrationTableSettingReq::Swap(CalibrationTableSettingReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableSettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableSettingReq_descriptor_;
  metadata.reflection = CalibrationTableSettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalibrationTableSettingAck::CalibrationTableSettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableSettingAck::InitAsDefaultInstance() {
}

CalibrationTableSettingAck::CalibrationTableSettingAck(const CalibrationTableSettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableSettingAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableSettingAck::~CalibrationTableSettingAck() {
  SharedDtor();
}

void CalibrationTableSettingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalibrationTableSettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableSettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableSettingAck_descriptor_;
}

const CalibrationTableSettingAck& CalibrationTableSettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableSettingAck* CalibrationTableSettingAck::default_instance_ = NULL;

CalibrationTableSettingAck* CalibrationTableSettingAck::New() const {
  return new CalibrationTableSettingAck;
}

void CalibrationTableSettingAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableSettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CalibrationTableSettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableSettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableSettingAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableSettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableSettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableSettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableSettingAck::MergeFrom(const CalibrationTableSettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableSettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableSettingAck::CopyFrom(const CalibrationTableSettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableSettingAck::IsInitialized() const {

  return true;
}

void CalibrationTableSettingAck::Swap(CalibrationTableSettingAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableSettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableSettingAck_descriptor_;
  metadata.reflection = CalibrationTableSettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationTableSettingNak::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

CalibrationTableSettingNak::CalibrationTableSettingNak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableSettingNak::InitAsDefaultInstance() {
}

CalibrationTableSettingNak::CalibrationTableSettingNak(const CalibrationTableSettingNak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableSettingNak::SharedCtor() {
  _cached_size_ = 0;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableSettingNak::~CalibrationTableSettingNak() {
  SharedDtor();
}

void CalibrationTableSettingNak::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void CalibrationTableSettingNak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableSettingNak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableSettingNak_descriptor_;
}

const CalibrationTableSettingNak& CalibrationTableSettingNak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableSettingNak* CalibrationTableSettingNak::default_instance_ = NULL;

CalibrationTableSettingNak* CalibrationTableSettingNak::New() const {
  return new CalibrationTableSettingNak;
}

void CalibrationTableSettingNak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableSettingNak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error_message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTableSettingNak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableSettingNak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string error_message = 1;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableSettingNak::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string error_message = 1;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableSettingNak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableSettingNak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableSettingNak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableSettingNak::MergeFrom(const CalibrationTableSettingNak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableSettingNak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableSettingNak::CopyFrom(const CalibrationTableSettingNak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableSettingNak::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalibrationTableSettingNak::Swap(CalibrationTableSettingNak* other) {
  if (other != this) {
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableSettingNak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableSettingNak_descriptor_;
  metadata.reflection = CalibrationTableSettingNak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalibrationTableGettingReq::CalibrationTableGettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableGettingReq::InitAsDefaultInstance() {
}

CalibrationTableGettingReq::CalibrationTableGettingReq(const CalibrationTableGettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableGettingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableGettingReq::~CalibrationTableGettingReq() {
  SharedDtor();
}

void CalibrationTableGettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalibrationTableGettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableGettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableGettingReq_descriptor_;
}

const CalibrationTableGettingReq& CalibrationTableGettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableGettingReq* CalibrationTableGettingReq::default_instance_ = NULL;

CalibrationTableGettingReq* CalibrationTableGettingReq::New() const {
  return new CalibrationTableGettingReq;
}

void CalibrationTableGettingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableGettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CalibrationTableGettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableGettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableGettingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableGettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableGettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableGettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableGettingReq::MergeFrom(const CalibrationTableGettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableGettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableGettingReq::CopyFrom(const CalibrationTableGettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableGettingReq::IsInitialized() const {

  return true;
}

void CalibrationTableGettingReq::Swap(CalibrationTableGettingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableGettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableGettingReq_descriptor_;
  metadata.reflection = CalibrationTableGettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationTableGettingAck::kTableFieldNumber;
#endif  // !_MSC_VER

CalibrationTableGettingAck::CalibrationTableGettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableGettingAck::InitAsDefaultInstance() {
  table_ = const_cast< ::kama::protocol::CalibrationTable*>(&::kama::protocol::CalibrationTable::default_instance());
}

CalibrationTableGettingAck::CalibrationTableGettingAck(const CalibrationTableGettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableGettingAck::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableGettingAck::~CalibrationTableGettingAck() {
  SharedDtor();
}

void CalibrationTableGettingAck::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
  }
}

void CalibrationTableGettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableGettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableGettingAck_descriptor_;
}

const CalibrationTableGettingAck& CalibrationTableGettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableGettingAck* CalibrationTableGettingAck::default_instance_ = NULL;

CalibrationTableGettingAck* CalibrationTableGettingAck::New() const {
  return new CalibrationTableGettingAck;
}

void CalibrationTableGettingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table()) {
      if (table_ != NULL) table_->::kama::protocol::CalibrationTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableGettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kama.protocol.CalibrationTable table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTableGettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kama.protocol.CalibrationTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableGettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kama.protocol.CalibrationTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableGettingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kama.protocol.CalibrationTable table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableGettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableGettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableGettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableGettingAck::MergeFrom(const CalibrationTableGettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::kama::protocol::CalibrationTable::MergeFrom(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableGettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableGettingAck::CopyFrom(const CalibrationTableGettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableGettingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_table()) {
    if (!this->table().IsInitialized()) return false;
  }
  return true;
}

void CalibrationTableGettingAck::Swap(CalibrationTableGettingAck* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableGettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableGettingAck_descriptor_;
  metadata.reflection = CalibrationTableGettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointingTable::kTimeFieldNumber;
const int PointingTable::kObjectTypeFieldNumber;
const int PointingTable::kItemFieldNumber;
#endif  // !_MSC_VER

PointingTable::PointingTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTable::InitAsDefaultInstance() {
}

PointingTable::PointingTable(const PointingTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTable::SharedCtor() {
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTable::~PointingTable() {
  SharedDtor();
}

void PointingTable::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (object_type_ != &::google::protobuf::internal::kEmptyString) {
    delete object_type_;
  }
  if (this != default_instance_) {
  }
}

void PointingTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTable_descriptor_;
}

const PointingTable& PointingTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTable* PointingTable::default_instance_ = NULL;

PointingTable* PointingTable::New() const {
  return new PointingTable;
}

void PointingTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_object_type()) {
      if (object_type_ != &::google::protobuf::internal::kEmptyString) {
        object_type_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_type;
        break;
      }

      // optional string object_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_type().data(), this->object_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .kama.protocol.PointingTableItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointingTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time(), output);
  }

  // optional string object_type = 2;
  if (has_object_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_type().data(), this->object_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_type(), output);
  }

  // repeated .kama.protocol.PointingTableItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // optional string object_type = 2;
  if (has_object_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_type().data(), this->object_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_type(), target);
  }

  // repeated .kama.protocol.PointingTableItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string object_type = 2;
    if (has_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_type());
    }

  }
  // repeated .kama.protocol.PointingTableItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTable::MergeFrom(const PointingTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_object_type()) {
      set_object_type(from.object_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTable::CopyFrom(const PointingTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTable::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void PointingTable::Swap(PointingTable* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(object_type_, other->object_type_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTable_descriptor_;
  metadata.reflection = PointingTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointingTableItem::kTimeFieldNumber;
const int PointingTableItem::kAzimuthFieldNumber;
const int PointingTableItem::kElevationFieldNumber;
#endif  // !_MSC_VER

PointingTableItem::PointingTableItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointingTableItem::InitAsDefaultInstance() {
}

PointingTableItem::PointingTableItem(const PointingTableItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointingTableItem::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  azimuth_ = 0;
  elevation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointingTableItem::~PointingTableItem() {
  SharedDtor();
}

void PointingTableItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointingTableItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointingTableItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointingTableItem_descriptor_;
}

const PointingTableItem& PointingTableItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

PointingTableItem* PointingTableItem::default_instance_ = NULL;

PointingTableItem* PointingTableItem::New() const {
  return new PointingTableItem;
}

void PointingTableItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointingTableItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_azimuth;
        break;
      }

      // required double azimuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_elevation;
        break;
      }

      // required double elevation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointingTableItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // required double azimuth = 2;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->azimuth(), output);
  }

  // required double elevation = 3;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elevation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointingTableItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // required double azimuth = 2;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->azimuth(), target);
  }

  // required double elevation = 3;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elevation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointingTableItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // required double azimuth = 2;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // required double elevation = 3;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointingTableItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointingTableItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointingTableItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointingTableItem::MergeFrom(const PointingTableItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointingTableItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointingTableItem::CopyFrom(const PointingTableItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointingTableItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PointingTableItem::Swap(PointingTableItem* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(elevation_, other->elevation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointingTableItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointingTableItem_descriptor_;
  metadata.reflection = PointingTableItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationTable::kItemFieldNumber;
#endif  // !_MSC_VER

CalibrationTable::CalibrationTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTable::InitAsDefaultInstance() {
}

CalibrationTable::CalibrationTable(const CalibrationTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTable::~CalibrationTable() {
  SharedDtor();
}

void CalibrationTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalibrationTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTable_descriptor_;
}

const CalibrationTable& CalibrationTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTable* CalibrationTable::default_instance_ = NULL;

CalibrationTable* CalibrationTable::New() const {
  return new CalibrationTable;
}

void CalibrationTable::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kama.protocol.CalibrationTableItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .kama.protocol.CalibrationTableItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .kama.protocol.CalibrationTableItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTable::ByteSize() const {
  int total_size = 0;

  // repeated .kama.protocol.CalibrationTableItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTable::MergeFrom(const CalibrationTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTable::CopyFrom(const CalibrationTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTable::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void CalibrationTable::Swap(CalibrationTable* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTable_descriptor_;
  metadata.reflection = CalibrationTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationTableItem::kTimeFieldNumber;
const int CalibrationTableItem::kValueFieldNumber;
#endif  // !_MSC_VER

CalibrationTableItem::CalibrationTableItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalibrationTableItem::InitAsDefaultInstance() {
}

CalibrationTableItem::CalibrationTableItem(const CalibrationTableItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrationTableItem::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationTableItem::~CalibrationTableItem() {
  SharedDtor();
}

void CalibrationTableItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalibrationTableItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationTableItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationTableItem_descriptor_;
}

const CalibrationTableItem& CalibrationTableItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kama_2eproto();
  return *default_instance_;
}

CalibrationTableItem* CalibrationTableItem::default_instance_ = NULL;

CalibrationTableItem* CalibrationTableItem::New() const {
  return new CalibrationTableItem;
}

void CalibrationTableItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationTableItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalibrationTableItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalibrationTableItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalibrationTableItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationTableItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationTableItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationTableItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationTableItem::MergeFrom(const CalibrationTableItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationTableItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationTableItem::CopyFrom(const CalibrationTableItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationTableItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CalibrationTableItem::Swap(CalibrationTableItem* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationTableItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationTableItem_descriptor_;
  metadata.reflection = CalibrationTableItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace kama

// @@protoc_insertion_point(global_scope)
